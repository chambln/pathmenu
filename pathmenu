#!/bin/sh -eu
# pathmenu
# Copyright (c) 2020 Gregory L. Chamberlain
# Available under the MIT License -- see LICENSE file.

NEWLINE='
'

browse() (
    cd "$1" >/dev/null || return 1
    for match in $patterns; do
        # Skip unexpanded patterns.
        [ -e "$match" ] || continue

        # Append a forward slash to directories if required.
        $append_slashes && [ -d "$match" ] && match=${match%/}/

        case $match in
            # Skip file names that contain a new line character, because
            # we are using the new line character as a delimiter for piping
            # file names into dmenu(1).
            *"$NEWLINE"*) continue ;;

            # Protect certain matches from cd(1) options parsing by
            # keeping their ‘./’ prefixes.  POSIX specifies -L and
            # -P, but implementations may provide additional options,
            # so we protect all file names that begin with a hyphen just
            # to be extra safe.
            #
            # We also protect ‘~’ since this has special meaning as
            # a shortcut later on.  So if there really is a file called
            # ‘~’ then it will be listed as ‘./~’ to prevent is
            # being interpretted as a shortcut.
            ./[-~]*) printf '%s\n' "$match" ;;

            # For other matches, ‘$match’ and ‘./$match’ are
            # almost certainly equivalent, so we can safely remove the
            # ‘./’ prefix for the sake of readability.
            #
            # The only exception I’m aware of is when ‘$match/’ exists
            # in a CDPATH directory that is positioned _in front of_
            # ‘.’, in which case perhaps the user intends to go
            # there -- especially since their CDPATH is configured that
            # way. See cd(1).
            #
            # My understanding is this:  With CDPATH unset or empty,
            # or ‘CDPATH=.’, or ‘CDPATH=.:*’ where * is anything, then
            # ‘$match’ necessarily means ‘./$match’.
            *) printf '%s\n' "${match#./}"
        esac
    done | eval "$dmenu" | while IFS= read -r target
    do
        # Strip ‘file://’ prefix -- useful for pasting in URIs.
        [ "${target##file://*}" ] && target=${target#file://}

        # Special case for ‘~’ meaning the home directory.
        case $target in \~|\~/) target=$HOME/; esac

        # ‘${target:=$ORIGPWD/}’:
        #     Empty selection refers to the starting directory (ORIGPWD),
        #     analogous to ‘cd’ with no argument -- see cd(1).
        case ${target:=$ORIGPWD/} in
            .)   printf '%s\n' "${PWD%/}" ;;
            ./)  printf '%s\n' "${PWD%/}"/ ;;
            ..)  printf '%s\n' "${PWD%/?*}" ;;
            */|-)browse "$target" ;;
            /*)  printf '%s\n' "$target" ;;
            *)   printf '%s\n' "${PWD%/}/${target#./}"
        esac
    done
)

# shellcheck disable=SC2016
A=- a=- d=- append_slashes=false dmenu='dmenu -p "$PWD"/'

while getopts AFPac:dh OPT; do
    case $OPT in
        A) A=A ;;
        F) append_slashes=true ;;
        P) cd() { command cd -P "$@"; } ;;
        a) a=a ;;
        c) dmenu=$OPTARG ;;
        d) d=d ;;
        ?) printf 'No such option: %s\n' "$OPT" >&2
           exit 2
    esac
done
shift $((OPTIND - 1))

case $A$a$d in
    ---) patterns='./*' ;;
    A--) patterns='./.[^.]* ./..?* ./*' ;;
    -a-) patterns='./.* ./*' ;;
    Aa-) patterns='./.. ./. ./*' ;;
    --d) patterns='./*/' ;;
    A-d) patterns='./.[^.]*/ ./..?*/ ./*/' ;;
    -ad) patterns='./.. ./. ./.[^.]*/ ./*/' ;;
    Aad) patterns='./.. ./. ./*/' ;;
esac

for directory in "${@:-$PWD}"; do
    ORIGPWD=$directory
    browse "$directory" || break
done
