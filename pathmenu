#!/bin/sh -euf
# pathmenu
# Copyright (c) 2020 Gregory L. Chamberlain
# Available under the MIT License -- see LICENSE file.

lsfile() {
    for match do
        test -"$TEST" "$match" || continue

        case $match in
            # Skip file names that contain a new line character, because
            # we are using the new line character as a delimiter for
            # piping file names into dmenu(1).
            *"$IFS"*) continue ;;

            # Protect vulnerable file names with the ‘./’ prefix.
            [-~]*) printf '%s\n' ./"$match" ;;

            # For other matches, ‘$match’ and ‘./$match’ are
            # almost certainly equivalent, so we can safely omit the
            # ‘./’ prefix for the sake of readability.
            */) printf '%s\n' "$match" ;;

            # Same as above, but skip this ‘$match’ if we also
            # matched ‘$match/’.
            *) case $IFS$*$IFS in
                   *$IFS$match/$IFS*) ;;
                   *) [ -e "$match/" ] && match=$match$SUFFIX
                      printf '%s\n' "$match"
               esac
        esac
    done
}

# shellcheck disable=SC2016
A=- a=- SUFFIX='' TEST=e PATTERNS='' DMENU='dmenu -p "$PWD"/' IFS='
' USAGE="Usage: ${0##*/} [-AadFfhnP] [-c COMMAND] [-p PATTERN]..."
while getopts Aac:dFfhnPp: OPT; do
    case $OPT in
        A) A=A ;;
        a) a=a ;;
        c) DMENU=$OPTARG ;;
        [dfn]) TEST=$OPT ;;
        F) SUFFIX=/ ;;
        h) printf '%s\n' "$USAGE"; exit ;;
        P) cd() { command cd -P -- "$@"; } ;;
        p) A=- a=- PATTERNS=$PATTERNS$IFS$OPTARG ;;
        ?) printf '%s\n' "$USAGE" >&2; exit 2 ;;
    esac
done
shift $((OPTIND - 1))

case $A$a in
    A-) PATTERNS=".[^.]*$IFS..?*$IFS*" ;;
    Aa) PATTERNS="..$IFS.$IFS*" ;;
    -a) PATTERNS="..$IFS.$IFS.[^.]*$IFS..?*$IFS*" ;;
esac

set -- "${1:-$PWD}"
while [ $# -gt 0 ] && cd -- "$1" >/dev/null && shift; do
    # shellcheck disable=SC2086
    sels=$(set +f; lsfile ${PATTERNS:-*}| eval "$DMENU") || exit 1
    for f in $sels; do
        case $f in
            \~)   f=$HOME/ ;;
            \~/*) f=$HOME/${f#*/}
        esac
        case $f in
            -|-/)  set -- "$@" "$OLDPWD"   ;;
            ..)    set -- "$@" "${PWD%/*}" ;;
            .)     printf '%s\n' "$PWD"    ;;
            ./)    printf '%s\n' "$PWD/"   ;;
            /*/)   set -- "$@" "$f"        ;;
            */)    set -- "$@" "$PWD/$f"   ;;
            /*)    printf '%s\n' "$f"      ;;
            *)     printf '%s\n' "$PWD/$f" ;;
        esac
    done
    set +f
done
