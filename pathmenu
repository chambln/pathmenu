#!/bin/sh -eu
# pathmenu
# Copyright (c) 2020 Gregory L. Chamberlain
# Available under the MIT License -- see LICENSE file.

suggest() {
    for match do
        shift
        # Skip unexpanded patterns.
        [ -e "$match" ] || continue

        # Append a forward slash to directories if required.
        $APPEND_SLASHES && [ -d "$match" ] && match=$match/

        case $match in
            # Skip file names that contain a new line character, because
            # we are using the new line character as a delimiter for
            # piping file names into dmenu(1).
            *"$IFS"*) continue ;;

            # Protect vulnerable file names by keeping their ‘./’
            # prefixes.
            ./[-~]*) printf '%s\n' ./"$match" ;;

            # For other matches, ‘$match’ and ‘./$match’ are
            # almost certainly equivalent, so we can safely omit the
            # ‘./’ prefix for the sake of readability.
            *) printf '%s\n' "$match"
        esac
    done
}

# shellcheck disable=SC2016
A=- a=- d=- APPEND_SLASHES=false DMENU='dmenu -p "$PWD"/' IFS='
' USAGE="Usage: ${0##*/} [-AFPadh] [-c COMMAND]"
while getopts AFPac:dh OPT; do
    case $OPT in
        A) A=A ;;
        F) APPEND_SLASHES=true ;;
        P) cd() { command cd -P "$@"; } ;;
        a) a=a ;;
        c) DMENU=$OPTARG ;;
        d) d=d ;;
        h) printf '%s\n' "$USAGE"; exit ;;
        ?) printf '%s\n' "$USAGE" >&2; exit 2 ;;
    esac
done
shift $((OPTIND - 1))

case $A$a$d in
    ---) PATTERNS='*' ;;
    A--) PATTERNS=".[!.]*$IFS..?*$IFS*" ;;
    -a-) PATTERNS=".*$IFS*" ;;
    Aa-) PATTERNS="..$IFS.$IFS*" ;;
    --d) PATTERNS='*/' ;;
    A-d) PATTERNS=".[!.]*/$IFS..?*/$IFS*/" ;;
    -ad) PATTERNS="..$IFS.$IFS.[!.]*/$IFS*/" ;;
    Aad) PATTERNS="..$IFS.$IFS*/" ;;
esac

set -- "${1:-$PWD}"
while [ $# -gt 0 ] && cd "$1" >/dev/null && shift; do
    # shellcheck disable=SC2086
    for f in $(suggest $PATTERNS | eval "$DMENU"); do
        case $f in
            -|-/)  set -- "$@" "$OLDPWD"   ;;
            ~|\~/) set -- "$@" "$HOME"     ;;
            ..)    set -- "$@" "${PWD%/*}" ;;
            .)     printf '%s\n' "$PWD"    ;;
            ./)    printf '%s\n' "$PWD/"   ;;
            /*/)   set -- "$@" "$f"        ;;
            */)    set -- "$@" "$PWD/$f"   ;;
            /*)    printf '%s\n' "$f"      ;;
            *)     printf '%s\n' "$PWD/$f" ;;
        esac
    done
done
